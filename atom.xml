<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny的博客</title>
  <subtitle>花开堪折直须折，莫待无花空折枝。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrsunny123.github.io/"/>
  <updated>2016-08-24T06:20:43.511Z</updated>
  <id>http://mrsunny123.github.io/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript对象克隆</title>
    <link href="http://mrsunny123.github.io/2016/08/24/JS-Clone/"/>
    <id>http://mrsunny123.github.io/2016/08/24/JS-Clone/</id>
    <published>2016-08-24T02:41:20.000Z</published>
    <updated>2016-08-24T06:20:43.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有人问我如何克隆一个JS对象，我当时没答上来；过后我查资料弄懂了这个问题，现在整理成文。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>JavaScript的一切实例都是对象，但他们也分为原始类型和引用类型。原始类型对象指的是字符串（<code>String</code>）、数值（<code>Number</code>）、布尔值（<code>Boolean</code>）、<code>undefined</code>、<code>null</code>，引用类型对象指的是数组（<code>Array</code>）、对象（<code>Object</code>）、函数（<code>Function</code>）。<br>既然对象分为这两类，他们的复制克隆也是有差别的。普通对象存储的是对象的实际数据，而引用对象存储的是对象的引用地址，而把对象的实际内容单独存放。下面我们就来看看他们克隆的区别。<br><a id="more"></a></p>
<h2 id="原始类型对象的克隆"><a href="#原始类型对象的克隆" class="headerlink" title="原始类型对象的克隆"></a>原始类型对象的克隆</h2><h3 id="字符串的克隆"><a href="#字符串的克隆" class="headerlink" title="字符串的克隆"></a>字符串的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=&quot;abc&quot;;</div><div class="line">var y=x;</div><div class="line">y=&quot;xyz&quot;;</div><div class="line"> </div><div class="line">alert(x);   // &quot;abc&quot;</div><div class="line">alert(y);   // &quot;xyz&quot;</div></pre></td></tr></table></figure>
<h3 id="数值的克隆"><a href="#数值的克隆" class="headerlink" title="数值的克隆"></a>数值的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=1;</div><div class="line">var y=x;</div><div class="line">y=2;</div><div class="line"></div><div class="line">alert(x);   // 1</div><div class="line">alert(y);   // 2</div></pre></td></tr></table></figure>
<h3 id="布尔值的克隆"><a href="#布尔值的克隆" class="headerlink" title="布尔值的克隆"></a>布尔值的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=true;</div><div class="line">var y=x;</div><div class="line">y=false;</div><div class="line"> </div><div class="line">alert(x);   // true</div><div class="line">alert(y);   // false</div></pre></td></tr></table></figure>
<p>我们可以看出来原始类型的克隆很简单，只需要一个<code>=</code>赋值就可以了；<code>undefined</code>、<code>null</code>也是同理。</p>
<h2 id="引用类型的对象克隆"><a href="#引用类型的对象克隆" class="headerlink" title="引用类型的对象克隆"></a>引用类型的对象克隆</h2><h3 id="数值的克隆-1"><a href="#数值的克隆-1" class="headerlink" title="数值的克隆"></a>数值的克隆</h3><p>如果采用普通克隆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=[1,2];</div><div class="line">var y=x;</div><div class="line">y.push(3);</div><div class="line"></div><div class="line">alert(x);   // 1,2,3</div><div class="line">alert(y);   // 1,2,3</div></pre></td></tr></table></figure></p>
<p>由上可知，原始数组x，克隆数组y，修改了克隆数组y，但也同时修改了原始数组x，这就是引用对象的特点。那么怎样才能达到完整的数组克隆呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var x=[1,2];</div><div class="line">var y=[];</div><div class="line">var i=0;</div><div class="line">var j=x.length;</div><div class="line">for(;i&lt;j;i++)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y.push(3);</div><div class="line"> </div><div class="line">console.log(x);   // [1,2]</div><div class="line">console.log(y);   // [1,2,3]</div></pre></td></tr></table></figure></p>
<p>这样，两个数值就互不干扰，实现了完整数组克隆。</p>
<h3 id="对象的克隆"><a href="#对象的克隆" class="headerlink" title="对象的克隆"></a>对象的克隆</h3><p>和数组的克隆同理，对象的完整克隆如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var x=&#123;a:2,b:4&#125;;</div><div class="line">var y=&#123;&#125;;</div><div class="line">var i;</div><div class="line">for(i in x)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y.c=6;</div><div class="line"> </div><div class="line">console.log(x);   // Object &#123;a: 2, b: 4&#125; </div><div class="line">console.log(y);   // Object &#123;a: 2, b: 4, c: 6&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数的克隆"><a href="#函数的克隆" class="headerlink" title="函数的克隆"></a>函数的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=function()&#123;alert(1);&#125;;</div><div class="line">var y=x;</div><div class="line">y=function()&#123;alert(2);&#125;;</div><div class="line"></div><div class="line">console.log(x);   // function()&#123;alert(1);&#125;;</div><div class="line">console.log(y);   // function()&#123;alert(2);&#125;;</div></pre></td></tr></table></figure>
<p>函数的克隆与原始类型对象克隆的方式类似；只需要使用<code>=</code>就可以了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>根据上面的情况，另外，克隆引用对象必须采用完整克隆（深度克隆），包括对象的值也是一个对象也要进行完整克隆（深度克隆）。所以，我们可以总结并封装一个通用的克隆方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function clone(obj)&#123;</div><div class="line">    var o,i,j,k;</div><div class="line">    if(typeof(obj)!==&quot;object&quot; || obj===null)return obj;</div><div class="line">    if(obj instanceof Array)&#123;</div><div class="line">        o=[];</div><div class="line">        i=0;j=obj.length;</div><div class="line">        for(;i&lt;j;i++)&#123;</div><div class="line">            if(typeof(obj[i])===&quot;object&quot; &amp;&amp; obj[i]!=null)&#123;</div><div class="line">                o[i]=clone(obj[i]);</div><div class="line">            &#125;else&#123;</div><div class="line">                o[i]=obj[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        o=&#123;&#125;;</div><div class="line">        for(i in obj)&#123;</div><div class="line">            if(typeof(obj[i])===&quot;object&quot; &amp;&amp; obj[i]!==null)&#123;</div><div class="line">                o[i]=clone(obj[i]);</div><div class="line">            &#125;else&#123;</div><div class="line">                o[i]=obj[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return o;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前有人问我如何克隆一个JS对象，我当时没答上来；过后我查资料弄懂了这个问题，现在整理成文。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;JavaScript的一切实例都是对象，但他们也分为原始类型和引用类型。原始类型对象指的是字符串（&lt;code&gt;String&lt;/code&gt;）、数值（&lt;code&gt;Number&lt;/code&gt;）、布尔值（&lt;code&gt;Boolean&lt;/code&gt;）、&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;，引用类型对象指的是数组（&lt;code&gt;Array&lt;/code&gt;）、对象（&lt;code&gt;Object&lt;/code&gt;）、函数（&lt;code&gt;Function&lt;/code&gt;）。&lt;br&gt;既然对象分为这两类，他们的复制克隆也是有差别的。普通对象存储的是对象的实际数据，而引用对象存储的是对象的引用地址，而把对象的实际内容单独存放。下面我们就来看看他们克隆的区别。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://mrsunny123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://mrsunny123.github.io/2016/08/23/Hello-Hexo/"/>
    <id>http://mrsunny123.github.io/2016/08/23/Hello-Hexo/</id>
    <published>2016-08-23T03:10:53.000Z</published>
    <updated>2016-08-23T09:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>做前端也有一段时间了，身为一个有(ai)追(zhuang)求(X)前端，怎么能没有自己的个人博客呢^_^<br>有想法就去做，所以最近用Hexo在github上搭建一个自己的开源博客，终于有了自己的博客了，也希望自己以后能坚持写文！！！<br>搭建过程中也遇到一些问题，接下来，我将遇到的问题记录下来作为第一篇博客，希望能帮到有需要的人。<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>安装Node.js<br>到<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>官网下载相应系统的最新版本，一路安装即可。</li>
<li>安装git<br>根据不同系统安装相应的 <a href="https://git-scm.com/" target="_blank" rel="external">git</a> 环境。Mac、Linux系统不多说，Windows一般安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">msysgit</a>。</li>
<li>安装Hexo<br>使用<code>npm install hexo-cli -g</code>命令安装 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 到全局，然后输入命令<code>hexo -v</code>，输出hexo的版本号即为安装成功。</li>
<li><p>github准备</p>
<ul>
<li>博客是在 <a href="https://github.com/" target="_blank" rel="external">github</a> 上托管维护的，所以当然需要一个github账号。然后在账号下创建一个名为<code>your-name.github.io</code>的仓库。(<code>your-name</code>为你的账号名，比如我的账号名为<code>mrsunny123</code>，那仓库名为<code>mrsunny123.github.io</code>；下文同理)</li>
<li><p>接下来打开Git Bash，输入配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;You Name&quot;</div><div class="line">git config --global user.email yourmail@server.com</div><div class="line">ssh-keygen -C &apos;yourmail@server.com&apos; -t rsa      //生成ssh秘钥</div></pre></td></tr></table></figure>
</li>
<li><p>接着在C:User你的windows用户名.ssh 下找到 id_rsa.pub 文件；</p>
</li>
<li>打开github个人首页，点击<code>settings -&gt; SSH and GPG keys -&gt; New SSH key</code>；title 可以随便取名字，Key 里面添加的内容为 id_rsa.pub 文件内所有的代码。然后点击<code>Add SSH key</code>即可。</li>
<li>使用<code>SSH -v git@github.com</code>命令检测 Git 与 GitHub 是否连接成功。</li>
</ul>
</li>
</ul>
<h1 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h1><ul>
<li>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，输入<code>hexo init</code>命令进行初始化；</li>
<li>初始化完成后，然后输入<code>hexo generate(g)</code>命令将文章编译为静态页面；</li>
<li>把文章变成页面后，输入<code>hexo server(s)</code>命令启动本地服务，在浏览器中输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>查看生成的页面效果。</li>
</ul>
<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo自己默认的主题是<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。我觉得默认主题不好看，所以换成了<code>yilia</code>主题，这个主题在移动端的显示也很不错。</p>
<ul>
<li><p>clone 主题代码<br>在目录下执行下面命令clone主题代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>Blog/_config.yml</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yilia    //默认为landscape</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>themes/yilia/_config.yml</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  所有文章: /archives</div><div class="line">  #随笔: /categories</div><div class="line"></div><div class="line"># SubNav</div><div class="line">subnav:</div><div class="line">  github: &quot;https://github.com/MrSunny123&quot;</div><div class="line">  weibo: &quot;http://weibo.com/u/5896702219&quot;</div><div class="line">  mail: &quot;mailto:zhangxy_92@outlook.com&quot;</div><div class="line">  rss: &quot;/atom.xml&quot;</div><div class="line">  #douban: &quot;#&quot;</div><div class="line">  #zhihu: &quot;#&quot;</div><div class="line">  #facebook: &quot;#&quot;</div><div class="line">  #google: &quot;#&quot;</div><div class="line">  #twitter: &quot;#&quot;</div><div class="line">  #linkedin: &quot;#&quot;</div><div class="line"></div><div class="line">rss: /atom.xml</div><div class="line"></div><div class="line"># 是否需要修改 root 路径</div><div class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</div><div class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</div><div class="line">root: </div><div class="line"></div><div class="line"># Content</div><div class="line">excerpt_link: 阅读全文</div><div class="line">fancybox: true</div><div class="line">mathjax: true</div><div class="line"></div><div class="line"># 是否开启动画效果</div><div class="line">animate: true</div><div class="line"></div><div class="line"># 是否在新窗口打开链接</div><div class="line">open_in_new: false</div><div class="line"></div><div class="line"># Miscellaneous</div><div class="line">google_analytics: &apos;&apos;</div><div class="line">favicon: /favicon.png</div><div class="line"></div><div class="line">#你的头像url</div><div class="line">avatar: /img/head.jpg</div><div class="line">#是否开启分享</div><div class="line">share_jia: true</div><div class="line">share_addthis: true</div><div class="line">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</div><div class="line">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</div><div class="line">duoshuo: &quot;sunny-blog&quot;</div><div class="line">#是否开启云标签</div><div class="line">tagcloud: true</div><div class="line"></div><div class="line">#是否开启友情链接</div><div class="line">#不开启——</div><div class="line">friends: false</div><div class="line">#开启——</div><div class="line">#friends:</div><div class="line">  #奥巴马的博客: http://localhost:4000/</div><div class="line"></div><div class="line">#是否开启“关于我”。</div><div class="line">#不开启——</div><div class="line">#aboutme: false</div><div class="line">#开启——</div><div class="line">aboutme: 程序猿一枚，目前专注WEB前端开发......</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现报错！</code></p>
<ul>
<li>查看效果<br>更改主题之后使用命令<code>hexo server(s)</code>打开本地服务，查看效果。</li>
</ul>
<h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>
<ul>
<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/MrSunny123/MrSunny123.github.io.git  //MrSunny123替换为你自己的用户名(下文同理)</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>然后使用如下命令部署：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>部署成功后，你在浏览器中输入<code>mrsunny123.github.io</code>，就能看到和本地一样的效果了。</p>
<h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>博客搭建完成后，就是写文和维护了，更新和维护其实很简单，每次只要依次执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo new(n) xxx    //创建新文章</div><div class="line">$ hexo clean     //清除缓存</div><div class="line">$ hexo generate(g)    //文章写完后执行，把文章生成页面</div><div class="line">$ hexo server(s)    //启动本地服务调试</div><div class="line">$ hexo deploy(d)    //部署到github</div></pre></td></tr></table></figure></p>
<p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>支持<code>Markdown</code>写文章，所以只有关心内容，不用担心排版，用起来还是很不错的^_^</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>博客还不是很完善，后期还会做一些修改，其实已经添加了一些东西了，比如：添加总站访问量和文章阅读量。<br>如果大家有什么问题，欢迎留言，我会把我知道的告诉大家。<br>好了，到这里利用Hexo搭建github博客的步骤就结束了。想想还有点小激动呢……</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;做前端也有一段时间了，身为一个有(ai)追(zhuang)求(X)前端，怎么能没有自己的个人博客呢^_^&lt;br&gt;有想法就去做，所以最近用Hexo在github上搭建一个自己的开源博客，终于有了自己的博客了，也希望自己以后能坚持写文！！！&lt;br&gt;搭建过程中也遇到一些问题，接下来，我将遇到的问题记录下来作为第一篇博客，希望能帮到有需要的人。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="Hexo" scheme="http://mrsunny123.github.io/tags/Hexo/"/>
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
