<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sunny的博客</title>
  <subtitle>花开堪折直须折，莫待无花空折枝。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mrsunny123.github.io/"/>
  <updated>2016-11-25T09:52:18.702Z</updated>
  <id>http://mrsunny123.github.io/</id>
  
  <author>
    <name>Sunny</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript必会技能——正则表达式</title>
    <link href="http://mrsunny123.github.io/2016/11/25/RegExp/"/>
    <id>http://mrsunny123.github.io/2016/11/25/RegExp/</id>
    <published>2016-11-25T09:39:59.000Z</published>
    <updated>2016-11-25T09:52:18.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h1><p>RegExp 对象表示正则表达式，它是对<code>字符串</code>执行模式匹配的强大工具。</p>
<h2 id="为什么使用正则表达式"><a href="#为什么使用正则表达式" class="headerlink" title="为什么使用正则表达式"></a>为什么使用正则表达式</h2><ul>
<li>测试字符串内的模式。例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li>
<li>替换文本。可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li>
<li>基于模式匹配从字符串中提取子字符串。可以查找文档内或输入域内特定的文本。<a id="more"></a>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2>正则表达式有两种方法定义：</li>
</ul>
<p>1.直接量语法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/pattern/attributes</div></pre></td></tr></table></figure></p>
<p>2.创建 RegExp 对象的语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new RegExp(pattern, attributes);</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>参数</strong>：参数pattern是一个字符串，指定了正则表达式的模式；参数attributes是一个可选的参数，包含属性g，i，m，分别使用与全局匹配，不区分大小写匹配，多行匹配；<br><strong>返回值</strong>：一个新的RegExp对象，具有指定的模式和标志；</p>
</blockquote>
<h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><table>
<thead>
<tr>
<th>修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>g</code></td>
<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>
</tr>
<tr>
<td><code>i</code></td>
<td>执行不分大小写匹配。</td>
</tr>
<tr>
<td><code>m</code></td>
<td>执行多行匹配。</td>
</tr>
</tbody>
</table>
<h3 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h3><p>方括号包含一系列字符，可以匹配它所包含的任意字符；同时可以通过<code>^</code>符号来定义否定字符类</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[abc]</code></td>
<td>查找在方括号中的任意一个字符</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>查找不在方括号中的任意一个字符</td>
</tr>
<tr>
<td><code>[0-9]</code></td>
<td>查找0-9中的任意一个数字</td>
</tr>
<tr>
<td><code>[a-z]</code></td>
<td>查找任何从小写 a 到小写 z 的字符</td>
</tr>
<tr>
<td><code>[A-Z]</code></td>
<td>查找任何从大写 a 到大写 z 的字符</td>
</tr>
</tbody>
</table>
<h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table>
<thead>
<tr>
<th>元字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>查找任意的单个字符，除换行符和其他Unicode行终止符之外</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>查找字母数字和下划线 ，等价于<code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\W</code></td>
<td>查找除字母数字下划线之外的字符，等价于<code>[\^a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td><code>\d</code></td>
<td>查找数字字符，等价于<code>[0-9]</code></td>
</tr>
<tr>
<td><code>\D</code></td>
<td>查找非数字字符，等价于<code>[\^0-9]</code></td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格，制表符，换行符等等。等价于<code>[\f\n\r\t\v]</code></td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符，等价于<code>[\^\f\n\r\t\v]</code></td>
</tr>
<tr>
<td><code>\b</code></td>
<td>查找一个单词边界，也就是指单词和空格间的位置，比如<code>er\b</code>可以匹配”never”中的”er”,但是不能匹配”verb”中的”er”</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>查找非单词边界，<code>er\B</code>能匹配”ver”中的”er”,但不能匹配”never”中的”er”</td>
</tr>
<tr>
<td><code>\0</code></td>
<td>查找空字符(<code>&quot;&quot;</code>)</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>查找换行符</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>查找回车符</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>查找换页符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>查找制表符</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>查找垂直制表符</td>
</tr>
</tbody>
</table>
<h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table>
<thead>
<tr>
<th>量词</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>n+</code></td>
<td>匹配任何至少包含一个n的字符串，等价于<code>n{1,}</code></td>
</tr>
<tr>
<td><code>n*</code></td>
<td>匹配零个或者多个n的字符串，等价于<code>n{0,}</code></td>
</tr>
<tr>
<td><code>n?</code></td>
<td>匹配零个或者1个n的字符串，等价于<code>n{0,1}</code></td>
</tr>
<tr>
<td><code>n{x}</code></td>
<td>匹配包含x个n的序列字符串</td>
</tr>
<tr>
<td><code>n{x,y}</code></td>
<td>匹配至少x个，最多y个n的字符串</td>
</tr>
<tr>
<td><code>n{x,}</code></td>
<td>匹配至少x个n的字符串</td>
</tr>
<tr>
<td><code>n$</code></td>
<td>匹配以n结尾的字符串</td>
</tr>
<tr>
<td><code>^n</code></td>
<td>匹配以n开头的字符串</td>
</tr>
</tbody>
</table>
<p>###正则表达式的特殊字符中需要转义字符###</p>
<blockquote>
<p>正则表达式中的特殊字符都有它们的特殊含义，所以当我们要匹配这些特殊字符本身时，需要对字符进行转义，转义只需要在字符前面加上<code>\</code>，这些特殊字符包括<code>$</code> <code>^</code> <code>*</code> <code>+</code> <code>.</code> <code>[</code> <code>?</code> <code>{</code> <code>|</code> <code>(</code> <code>)</code> <code>\</code></p>
</blockquote>
<h2 id="支持正则表达式的方法"><a href="#支持正则表达式的方法" class="headerlink" title="支持正则表达式的方法"></a>支持正则表达式的方法</h2><h3 id="RegExp-对象方法"><a href="#RegExp-对象方法" class="headerlink" title="RegExp 对象方法"></a>RegExp 对象方法</h3><p>1.<strong>test方法</strong>：该方法用于检测一个字符串是否匹配某个模式。</p>
<blockquote>
<p><strong>语法</strong>：<code>RegExpObject.test(str)</code><br><strong>参数</strong>：str是需要检测的字符串<br><strong>返回值</strong>：如果字符串str中含有与RegExpObject匹配的文本的话，返回true，否则返回false</p>
</blockquote>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var str = &quot;longen and yunxi&quot;;</div><div class="line">console.log(/longen/.test(str)); // true</div><div class="line">console.log(/longlong/.test(str)); //false</div></pre></td></tr></table></figure></p>
<p>2.<strong>exec方法</strong>：该方法用于检索字符串中的正则表达式的匹配。</p>
<blockquote>
<p><strong>语法</strong>：<code>RegExpObject.exec(str)</code><br><strong>参数</strong>：str是需要检测的字符串<br><strong>返回值</strong>：返回一个数组，存放匹配的结果，如果未找到匹配，则返回值为null</p>
</blockquote>
<p>示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var str = &quot;javascript html css&quot;;</div><div class="line">console.log(/html/.exec(str)); // [&quot;html&quot;, index: 11, input: &quot;javascript html css&quot;]</div><div class="line">返回的数组的第一个元素是与正则表达式相匹配的文本，该方法还返回2个属性，index属性声明的是匹配文本的第一个字符的位置；input属性则存放的是被检索的字符串string。</div><div class="line"></div><div class="line">// 假如没有找到的话，则返回null</div><div class="line">console.log(/node/.exec(str)); // null</div></pre></td></tr></table></figure>
<h3 id="支持正则表达式的-String-对象的方法"><a href="#支持正则表达式的-String-对象的方法" class="headerlink" title="支持正则表达式的 String 对象的方法"></a>支持正则表达式的 String 对象的方法</h3><p>1.<strong>search方法</strong>：该方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的字符串。</p>
<blockquote>
<p><strong>语法</strong>：<code>stringObject.search(regexp)</code><br><strong>参数</strong>：regexp可以是在stringObject中检索的字符串，也可以是需要检索的RegExp对象<br><strong>返回值</strong>：stringObject中第一个与regexp对象相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回-1；</p>
</blockquote>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var str = &quot;hello world,hello world&quot;;</div><div class="line">// 返回匹配到的第一个位置</div><div class="line">console.log(str.search(/hello/)); // 0</div><div class="line">// search方法不执行全局匹配，它将忽略标志g，同时它也没有regexp对象的lastIndex的属性，且总是从字符串开始位置进行查找，总是返回的是stringObject匹配的第一个位置。</div><div class="line">console.log(str.search(/hello/g)); //0</div><div class="line">console.log(str.search(/world/)); // 6</div><div class="line"></div><div class="line">// 也可以是检索字符串中的字符</div><div class="line">console.log(str.search(&quot;wo&quot;)); // 6</div><div class="line"></div><div class="line">// 如果没有检索到的话，则返回-1</div><div class="line">console.log(str.search(/longen/)); // -1</div><div class="line"></div><div class="line">// 我们检索的时候 可以忽略大小写来检索</div><div class="line">var str2 = &quot;Hello&quot;;</div><div class="line">console.log(str2.search(/hello/i)); // 0</div></pre></td></tr></table></figure></p>
<p>2.<strong>match方法</strong>：该方法用于在字符串内检索指定的值，或找到一个或者多个正则表达式的匹配。该方法类似于indexOf()或者lastIndexOf(); 但是它返回的是指定的值，而不是字符串的位置。</p>
<blockquote>
<p><strong>语法</strong>：<code>stringObject.match(regexp)</code><br><strong>参数</strong>：regexp可以是在stringObject中检索的字符串，也可以是需要检索的RegExp对象<br><strong>返回值</strong>：存放匹配成功的数组；如果没有找到任何的一个匹配，那么它将返回的是null。</p>
</blockquote>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var str = &quot;hello world&quot;;</div><div class="line">// 返回的数组内有三个元素，第一个元素的存放的是匹配的文本，还有二个对象属性；index属性表明的是匹配文本的起始字符在stringObject中的位置；input属性声明的是对stringObject对象的引用；</div><div class="line">console.log(str.match(&quot;hello&quot;)); // [&quot;hello&quot;, index: 0, input: &quot;hello world&quot;]</div><div class="line">console.log(str.match(&quot;Hello&quot;)); // null</div><div class="line">console.log(str.match(/hello/)); // [&quot;hello&quot;, index: 0, input: &quot;hello world&quot;]</div><div class="line"></div><div class="line">// 全局匹配也返回一个数组，但有些不一样；它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。</div><div class="line">var str2=&quot;1 plus 2 equal 3&quot;</div><div class="line">console.log(str2.match(/\d+/g)); //[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;]</div></pre></td></tr></table></figure></p>
<p>3.<strong>replace方法</strong>：该方法用于在字符串中使用一些字符替换另一些字符，或者替换一个与正则表达式匹配的子字符串。</p>
<blockquote>
<p><strong>语法</strong>：<code>stringObject.replace(regexp/substr,replacement);</code><br><strong>参数</strong>：regexp/substr可以是字符串或者是需要替换模式的RegExp对象；replacement可以是替换的文本或者是生成替换文本的函数。<br><strong>返回值</strong>：返回替换后的新字符串。</p>
<p>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串。 </p>
<p>replacement可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p>
</blockquote>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$1</code>、<code>$2</code>、…、<code>$99</code></td>
<td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td>
</tr>
<tr>
<td><code>$&amp;</code></td>
<td>与 regexp 相匹配的子串。</td>
</tr>
<tr>
<td><code>$`</code></td>
<td>位于匹配子串左侧的文本。</td>
</tr>
<tr>
<td><code>$’</code></td>
<td>位于匹配子串右侧的文本。</td>
</tr>
<tr>
<td><code>$$</code></td>
<td>表示美元符号$。</td>
</tr>
</tbody>
</table>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">var str = &quot;hello world&quot;;</div><div class="line">// 使用字符串替换字符串</div><div class="line">var s1 = str.replace(&quot;hello&quot;,&quot;a&quot;);</div><div class="line">console.log(s1);// a world</div><div class="line"></div><div class="line">// 使用正则替换字符串</div><div class="line">var s2 = str.replace(/hello/,&quot;b&quot;);</div><div class="line">console.log(s2); // b world</div><div class="line"></div><div class="line">// 使用正则全局替换字符串</div><div class="line">var s3 = str.replace(/l/g,&apos;&apos;);</div><div class="line">console.log(s3); // heo word</div><div class="line"></div><div class="line">// $1,$2 代表的是第一个和第二个子表达式相匹配的文本</div><div class="line">// 子表达式需要使用小括号括起来,代表的含义是分组</div><div class="line">var name = &quot;longen    ,yunxi&quot;;</div><div class="line">var s4 = name.replace(/(\w+)\s*,\s*(\w+)/,&quot;$2 $1&quot;);</div><div class="line">console.log(s4); // &quot;yunxi,longen&quot;</div><div class="line"></div><div class="line">console.log(&apos;hello world&apos;.replace(/w/g, &apos;$&amp;&apos;)) //hello world</div><div class="line">console.log(&apos;hello world&apos;.replace(/w/g, &apos;$$&apos;)) //hello $orld</div><div class="line">console.log(&apos;hello world&apos;.replace(/w/g, &apos;$`&apos;)) //hello hello orld</div><div class="line">console.log(&apos;hello world&apos;.replace(/w/g, &quot;$&apos;&quot;)) //hello orldorld</div><div class="line"></div><div class="line">// replace 第二个参数也可以是一个function 函数</div><div class="line">// 单词首字母大写</div><div class="line">var name = &apos;aaa bbb ccc&apos;;</div><div class="line">var uw=name.replace(/\b\w+\b/g, function(word)&#123;</div><div class="line">	return word.substring(0,1).toUpperCase()+word.substring(1);&#125;</div><div class="line">);</div><div class="line">console.log(uw) //Aaa Bbb Ccc</div><div class="line"></div><div class="line"></div><div class="line">var name2 = &quot;123cbc45678rtyu909876pjkl54321&quot;;</div><div class="line">name2.replace(/\d+/g,function(v)&#123;</div><div class="line">    console.log(v); </div><div class="line">    /*</div><div class="line">     * 第一次打印123</div><div class="line">     * 第二次打印45678</div><div class="line">     * 第三次打印909876</div><div class="line">     * 第四次打印54321</div><div class="line">     */</div><div class="line">&#125;);</div><div class="line">/*</div><div class="line"> * 如下函数，回调函数参数一共有四个</div><div class="line"> * 第一个参数的含义是 匹配的字符串</div><div class="line"> * 第二个参数的含义是 正则表达式分组内容，没有分组的话，就没有该参数,</div><div class="line"> * 如果没有该参数的话那么第四个参数就是undefined</div><div class="line"> * 第三个参数的含义是 匹配项在字符串中的索引index</div><div class="line"> * 第四个参数的含义是 原字符串</div><div class="line"> */</div><div class="line"> name2.replace(/(\d+)/g,function(a,b,c,d)&#123;</div><div class="line">    console.log(a);</div><div class="line">    console.log(b);</div><div class="line">    console.log(c);</div><div class="line">    console.log(d);</div><div class="line">    /*</div><div class="line">     * 如上会执行四次，值分别如下(正则使用小括号，代表分组)：</div><div class="line">     * 第一次： 123,123,0,123cbc45678rtyu909876pjkl54321</div><div class="line">     * 第二次： 45678,45678,6,123cbc45678rtyu909876pjkl54321</div><div class="line">     * 第三次： 909876,909876,15,123cbc45678rtyu909876pjkl54321</div><div class="line">     * 第四次： 54321,54321,25,123cbc45678rtyu909876pjkl54321</div><div class="line">     */</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>4.<strong>split方法</strong>：该方法把一个字符串分割成字符串数组。</p>
<blockquote>
<p><strong>语法</strong>：<code>stringObject.split(separator,howmany)</code><br><strong>参数</strong>：<br>   1.separator[必填项]，字符串或正则表达式，该参数指定的地方分割stringObject;<br>   2.howmany[可选] 该参数指定返回的数组的最大长度，如果设置了该参数，返回的子字符串不会多于这个参数指定的数组。如果没有设置该参数的话，整个字符串都会被分割，不考虑他的长度。<br><strong>返回值</strong>：一个字符串数组。该数组通过在separator指定的边界处将字符串stringObject分割成子字符串。</p>
</blockquote>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var str=&quot;How are you doing today?&quot;</div><div class="line">console.log(str.split(&quot; &quot;)) //[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;doing&quot;, &quot;today?&quot;]</div><div class="line">console.log(str.split(&quot;&quot;)) //[&quot;H&quot;, &quot;o&quot;, &quot;w&quot;, &quot; &quot;, &quot;a&quot;, &quot;r&quot;, &quot;e&quot;, &quot; &quot;, &quot;y&quot;, &quot;o&quot;, &quot;u&quot;, &quot; &quot;, &quot;d&quot;, &quot;o&quot;, &quot;i&quot;, &quot;n&quot;, &quot;g&quot;, &quot; &quot;, &quot;t&quot;, &quot;o&quot;, &quot;d&quot;, &quot;a&quot;, &quot;y&quot;, &quot;?&quot;]</div><div class="line">console.log(str.split(&quot; &quot;,3)) //[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;]</div><div class="line"></div><div class="line">// 也可以使用正则表达式</div><div class="line">console.log(str.split(/\s+/)) //[&quot;How&quot;, &quot;are&quot;, &quot;you&quot;, &quot;doing&quot;, &quot;today?&quot;]</div></pre></td></tr></table></figure></p>
<h2 id="贪婪模式与非贪婪模式"><a href="#贪婪模式与非贪婪模式" class="headerlink" title="贪婪模式与非贪婪模式"></a>贪婪模式与非贪婪模式</h2><p>Javascript中的正则表达式贪婪模式与非贪婪模式的区别是：被量词修饰的子表达式的匹配行为；贪婪模式在整个表达式匹配成功的情况下尽可能多的匹配；非贪婪模式在整个表达式匹配成功的前提下，尽可能少的匹配。</p>
<p>一些常见的修饰贪婪模式的量词如下：<br><code>{x,y}</code>，<code>{x,}</code>，<code>?</code>，<code>*</code>和<code>+</code></p>
<p>非贪婪模式就是在如上贪婪模式后加上一个问号（<code>?</code>），就可以变成非贪婪模式的量词；如下：<br><code>{x,y}?</code>，<code>{x,}?</code>，<code>??</code>，<code>*?</code>，和<code>+?</code></p>
<p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//贪婪模式，尽可能多的匹配</div><div class="line">console.log(&apos;0123456789&apos;.replace(/\d&#123;3,6&#125;/,&quot;*&quot;)) //*6789</div><div class="line"></div><div class="line">//非贪婪模式，尽可能少的匹配</div><div class="line">console.log(&apos;0123456789&apos;.replace(/\d&#123;3,6&#125;?/,&quot;*&quot;)) //*3456789</div></pre></td></tr></table></figure></p>
<h2 id="分组与反向引用"><a href="#分组与反向引用" class="headerlink" title="分组与反向引用"></a>分组与反向引用</h2><p><strong>分组</strong>，又称为子表达式。把正则表达式拆分成小表达式。</p>
<p>直接上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//不分组，量词仅作用到最后一个字符(c)</div><div class="line">console.log(/abc&#123;2&#125;/.test(&apos;abcabc&apos;)); // false</div><div class="line">console.log(/abc&#123;2&#125;/.test(&apos;abcc&apos;)); //true</div><div class="line"></div><div class="line">//分组，量词作用于整个括号里的子表达式</div><div class="line">console.log(/(abc)&#123;2&#125;/.test(&apos;abcabc&apos;)); // true</div><div class="line">console.log(/(abc)&#123;2&#125;/.test(&apos;abcc&apos;)); //false</div></pre></td></tr></table></figure></p>
<p>分组经常和<strong>反向引用</strong>一起使用，反向引用在前面的replace方法就有了，只不过没有说他的概念，这里说一下：<code>当一个正则表达式被分组后，每个分组自动被赋予一个组号，一左到右分别是 $1 $2…</code><br>再举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//格式化日期</div><div class="line">var reg = /^(\d&#123;4&#125;)[/-](\d&#123;2&#125;)[/-](\d&#123;2&#125;)$/</div><div class="line">console.log(&apos;2016/11/18&apos;.replace(reg, &apos;$1年$2月$3日&apos;)) //2016年11月18日</div><div class="line">console.log(&apos;2016-11-18&apos;.replace(reg, &apos;$1年$2月$3日&apos;)) //2016年11月18日</div><div class="line">console.log(&apos;2016-11-18&apos;.replace(reg, &apos;$1$2$3&apos;)) //20161118</div></pre></td></tr></table></figure></p>
<h2 id="非捕获性分组"><a href="#非捕获性分组" class="headerlink" title="非捕获性分组"></a>非捕获性分组</h2><p>不是所有分组都能创建反向引用，有一种分组叫做非捕获性分组，非捕获性分组以<code>(?:pattern)</code>表示，在一些只需要分组匹配但是并不需要得到各个分组匹配的结果时，使用非捕获性分组可以提高匹配速度；非捕获分组的含义我们可以理解为如下：子表达式可以作为被整体修饰但是子表达式匹配的结果不会被存储；如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var reg = /(?:\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</div><div class="line">var date = &apos;2012-12-21&apos;</div><div class="line">reg.test(date)</div><div class="line">RegExp.$1  // 12</div><div class="line">RegExp.$2  // 21</div></pre></td></tr></table></figure>
<p>这里，<code>(?:\d{4})</code>分组不会捕获任何字符串，所以<code>$1</code>为<code>(\d{2})</code>捕获的字符串。</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>初学者第一次看到这个名词可能有点懵逼(我第一次也不懂)，这里说明一下。</p>
<blockquote>
<p>零宽断言就是下结论，例如ab，正则：a(?=b)，匹配a并且向右看是b，得到的结果是a，断言不会在匹配的内容当中，如果是a(?=c)，则匹配不到任何内容，因为匹配a以后向右看并不是c。另外，零宽断言分两种：前瞻(Lookahead)和后顾(Lookbehind);<code>但JavaScript只支持前瞻</code>。</p>
</blockquote>
<p>前瞻表达式的语法如下：</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>m(?=n)</code></td>
<td>匹配后面紧接n的字符串m</td>
</tr>
<tr>
<td><code>m(?!n)</code></td>
<td>匹配后面没有紧接n的字符串m</td>
</tr>
</tbody>
</table>
<p>再两个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 获取字符串中以ing结尾的单词的前半部分</div><div class="line">var str = &apos;I love dancing but he likes singing&apos;;</div><div class="line">var pattern = /\b\w+(?=ing\b)/g;</div><div class="line">var ans = str.match(pattern);</div><div class="line">console.log(ans); // [&quot;danc&quot;, &quot;sing&quot;]</div><div class="line"></div><div class="line"></div><div class="line">// 获取第五位不是i的单词的前四位</div><div class="line">var s = &apos;I love dancing but he likes singing&apos;;</div><div class="line">var pattern = /\b\w&#123;4&#125;(?!i)/g;</div><div class="line">var ans = s.match(pattern);</div><div class="line">console.log(ans); // [&quot;love&quot;, &quot;like&quot;]</div></pre></td></tr></table></figure></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>正则表达式基础知识差不多这些够用了，后面就是多谢多运用。共勉！</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>最后推荐两个比较好的工具，能帮助我们写出更好更准确的正则表达式。<br><a href="https://regexper.com/" target="_blank" rel="external">正则表达式图形化工具</a><br><a href="http://regexr.com/" target="_blank" rel="external">正则表达式检测工具</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="external">JavaScript RegExp 对象</a><br><a href="http://www.cnblogs.com/tugenhua0707/p/5037811.html" target="_blank" rel="external">深入浅出的javascript的正则表达式学习教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;正则表达式是什么&quot;&gt;&lt;a href=&quot;#正则表达式是什么&quot; class=&quot;headerlink&quot; title=&quot;正则表达式是什么&quot;&gt;&lt;/a&gt;正则表达式是什么&lt;/h1&gt;&lt;p&gt;RegExp 对象表示正则表达式，它是对&lt;code&gt;字符串&lt;/code&gt;执行模式匹配的强大工具。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用正则表达式&quot;&gt;&lt;a href=&quot;#为什么使用正则表达式&quot; class=&quot;headerlink&quot; title=&quot;为什么使用正则表达式&quot;&gt;&lt;/a&gt;为什么使用正则表达式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;测试字符串内的模式。例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。&lt;/li&gt;
&lt;li&gt;替换文本。可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。&lt;/li&gt;
&lt;li&gt;基于模式匹配从字符串中提取子字符串。可以查找文档内或输入域内特定的文本。
    
    </summary>
    
      <category term="学习" scheme="http://mrsunny123.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://mrsunny123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>移动Web开发小结</title>
    <link href="http://mrsunny123.github.io/2016/09/26/%E7%A7%BB%E5%8A%A8Web/"/>
    <id>http://mrsunny123.github.io/2016/09/26/移动Web/</id>
    <published>2016-09-26T09:22:25.000Z</published>
    <updated>2016-09-26T09:38:34.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在做移动Web开发时有很多地方跟PC端是不一样的，需要不一样的设置，这里就记录下移动Web开发中有用的设置和一些通用代码。</p>
</blockquote>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="设置页面宽度等于设备宽度，并禁止用户缩放页面"><a href="#设置页面宽度等于设备宽度，并禁止用户缩放页面" class="headerlink" title="设置页面宽度等于设备宽度，并禁止用户缩放页面"></a>设置页面宽度等于设备宽度，并禁止用户缩放页面</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="忽略页面中的数字识别为电话，忽略email识别"><a href="#忽略页面中的数字识别为电话，忽略email识别" class="headerlink" title="忽略页面中的数字识别为电话，忽略email识别"></a>忽略页面中的数字识别为电话，忽略email识别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="开启对web-app程序的支持（仅针对IOS系统）"><a href="#开启对web-app程序的支持（仅针对IOS系统）" class="headerlink" title="开启对web app程序的支持（仅针对IOS系统）"></a>开启对web app程序的支持（仅针对IOS系统）</h2><blockquote>
<p>网站开启对web app程序的支持，其实意思就是删除默认的苹果工具栏和菜单栏，开启全屏显示</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="改变顶部状态条的颜色（仅针对IOS系统）"><a href="#改变顶部状态条的颜色（仅针对IOS系统）" class="headerlink" title="改变顶部状态条的颜色（仅针对IOS系统）"></a>改变顶部状态条的颜色（仅针对IOS系统）</h2><blockquote>
<p>在 web app 下状态条（屏幕顶部条）的颜色默认值为 default（白色），可以定为 black（黑色）和 black-translucent（灰色半透明）；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="完整的HTML模板"><a href="#完整的HTML模板" class="headerlink" title="完整的HTML模板"></a>完整的HTML模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot; /&gt;</div><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telphone=no, email=no&quot; /&gt;</div><div class="line">&lt;title&gt;标题&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">这里开始内容</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="css-reset"><a href="#css-reset" class="headerlink" title="css reset"></a>css reset</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">html&#123;</div><div class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0); /*去掉触摸遮盖层*/</div><div class="line">    -webkit-user-modify: read-write-plaintext-only;</div><div class="line">    -webkit-user-select: none; /*禁止用户选择文字*/</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*设置所有盒子大小计算边框内*/</div><div class="line">*,</div><div class="line">*:before,</div><div class="line">*:after &#123;</div><div class="line">    box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*消除输入框的阴影和边框*/</div><div class="line">input,textarea, select&#123;</div><div class="line">    -webkit-appearance: none; /*去掉webkit默认的表单样式*/</div><div class="line">    appearance: none;</div><div class="line">    outline: none;</div><div class="line">    border: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="消除transition动画闪屏"><a href="#消除transition动画闪屏" class="headerlink" title="消除transition动画闪屏"></a>消除transition动画闪屏</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.animate &#123;</div><div class="line">    -webkit-transform-style: preserve-3d; /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</div><div class="line">    -webkit-backface-visibility: hidden; /*设置进行转换的元素的背面在面对用户时是否可见：隐藏*/</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="开启硬件加速"><a href="#开启硬件加速" class="headerlink" title="开启硬件加速"></a>开启硬件加速</h2><blockquote>
<p> 解决页面闪白，保证动画流畅。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.css &#123;</div><div class="line">   -webkit-transform: translate3d(0, 0, 0);</div><div class="line">   -moz-transform: translate3d(0, 0, 0);</div><div class="line">   -ms-transform: translate3d(0, 0, 0);</div><div class="line">   transform: translate3d(0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="关于打电话、发短信、发邮件的实现"><a href="#关于打电话、发短信、发邮件的实现" class="headerlink" title="关于打电话、发短信、发邮件的实现"></a>关于打电话、发短信、发邮件的实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;tel:10086&quot;&gt;打电话给：10086&lt;/a&gt;</div><div class="line">&lt;a href=&quot;sms:10086&quot;&gt;发短信给：10086&lt;/a&gt;</div><div class="line">&lt;a href=&quot;mailto:zhangxy_92@outlook.com&quot;&gt;发邮件给：zhangxy_92@outlook.com&lt;/a&gt;</div></pre></td></tr></table></figure>
<h2 id="关于布局"><a href="#关于布局" class="headerlink" title="关于布局"></a>关于布局</h2><blockquote>
<p>移动端中对于flexbox的支持已经很好，flexbox是布局神器。阮一峰老师写过<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">flexbox 入门教程</a>；以后自己可能也会写一篇flexbox的学习和总结笔记。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在做移动Web开发时有很多地方跟PC端是不一样的，需要不一样的设置，这里就记录下移动Web开发中有用的设置和一些通用代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;设置页面宽度等于设备宽度，并禁止用户缩放页面&quot;&gt;&lt;a href=&quot;#设置页面宽度等于设备宽度，并禁止用户缩放页面&quot; class=&quot;headerlink&quot; title=&quot;设置页面宽度等于设备宽度，并禁止用户缩放页面&quot;&gt;&lt;/a&gt;设置页面宽度等于设备宽度，并禁止用户缩放页面&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;忽略页面中的数字识别为电话，忽略email识别&quot;&gt;&lt;a href=&quot;#忽略页面中的数字识别为电话，忽略email识别&quot; class=&quot;headerlink&quot; title=&quot;忽略页面中的数字识别为电话，忽略email识别&quot;&gt;&lt;/a&gt;忽略页面中的数字识别为电话，忽略email识别&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;telphone=no, email=no&amp;quot; /&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="HTML5" scheme="http://mrsunny123.github.io/tags/HTML5/"/>
    
      <category term="CSS3" scheme="http://mrsunny123.github.io/tags/CSS3/"/>
    
      <category term="移动开发" scheme="http://mrsunny123.github.io/tags/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>JS开发中的一些小技巧和方法</title>
    <link href="http://mrsunny123.github.io/2016/09/19/JS-Tips/"/>
    <id>http://mrsunny123.github.io/2016/09/19/JS-Tips/</id>
    <published>2016-09-19T06:51:04.000Z</published>
    <updated>2016-09-19T07:06:38.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这两年前端很火，JavaScript又是前端的必会技能，在JavaScript开发中其实有一些有意思的小技巧和方法，本文记录了一些我工作中遇到的一些技巧和方法。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="生成指定范围内的随机数"><a href="#生成指定范围内的随机数" class="headerlink" title="生成指定范围内的随机数"></a>生成指定范围内的随机数</h2><blockquote>
<p>当我们需要获取指定范围<code>(min,max)</code>内的整数的时候，下面的代码非常适合；这段代码用的还挺多的。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function setRadomNum(min,max)&#123;</div><div class="line">    return  Math.floor(Math.random() * (max - min + 1)) + min;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="json转url参数"><a href="#json转url参数" class="headerlink" title="json转url参数"></a>json转url参数</h2><blockquote>
<p>当我们进行http请求时，可能需要把json转化为url参数，这时下面这段代码就派上用场了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function json2url(json) &#123;</div><div class="line">    var arr=[];</div><div class="line">    for(var name in json)&#123;</div><div class="line">        arr.push(name+&apos;=&apos;+json[name]);</div><div class="line">    &#125;</div><div class="line">    return arr.join(&apos;&amp;&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="验证是否为数组"><a href="#验证是否为数组" class="headerlink" title="验证是否为数组"></a>验证是否为数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function isArray(obj)&#123;</div><div class="line">    return Array.isArray(obj) || Object.prototype.toString.call(obj) === &apos;[object Array]&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>先检验本地是否有<code>Array.isArray</code>函数，没有就执行后面的方法检测。</p>
</blockquote>
<h2 id="清空数组"><a href="#清空数组" class="headerlink" title="清空数组"></a>清空数组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">方式一 通过将长度设置为0</div><div class="line">var arr=[1,2,3,4,5];</div><div class="line">arr.length=0;</div><div class="line"></div><div class="line">方式二 通过splice方法</div><div class="line"> var arr=[1,2,3,4,5];</div><div class="line">arr.splice(0,arr.length);</div><div class="line"></div><div class="line">//方式三</div><div class="line">var arr=[1,2,3,4,5];</div><div class="line">arr=[];</div></pre></td></tr></table></figure>
<blockquote>
<p>方式三将一个新的数组的引用赋值给变量，其他引用并不受影响。 这意味着以前数组的内容被引用的话将依旧存在于内存中，这将导致内存泄漏。<code>最高效的方法是第一种</code>，所以推荐使用第一种方法清空数组。</p>
</blockquote>
<h2 id="保留指定小数位"><a href="#保留指定小数位" class="headerlink" title="保留指定小数位"></a>保留指定小数位</h2><blockquote>
<p>这个需求在项目中也是很常见的，可以toFixed()方法</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var num =3.1415926;</div><div class="line">num = num.toFixed(4); //toFixed()方法可把 Number 四舍五入为指定小数位数的数字，括号里面取值0~20（包括0和20）</div><div class="line">console.log(num); //3.1416</div></pre></td></tr></table></figure>
<h2 id="打乱数组的顺序"><a href="#打乱数组的顺序" class="headerlink" title="打乱数组的顺序"></a>打乱数组的顺序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">方式一</div><div class="line">arr.sort(function()&#123;return Math.random()-0.5&#125;);</div><div class="line"></div><div class="line">方式二</div><div class="line">function shuffle(arr) &#123;</div><div class="line">    var i, </div><div class="line">        j,</div><div class="line">        temp;</div><div class="line">    for (i = arr.length - 1; i &gt; 0; i--) &#123;</div><div class="line">        j = Math.floor(Math.random() * (i + 1));</div><div class="line">        temp = arr[i];</div><div class="line">        arr[i] = arr[j];</div><div class="line">        arr[j] = temp;</div><div class="line">    &#125;</div><div class="line">    return arr;    </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>方式一使用了数组的内置排序方法：<code>sort</code>，而方式二是借助了一个中间量，随机数组里的两个值，让它们交换位置。</p>
</blockquote>
<h2 id="使用-而不是"><a href="#使用-而不是" class="headerlink" title="使用 === 而不是 =="></a>使用 === 而不是 ==</h2><blockquote>
<p>== (或者 !=) 操作在需要的情况下自动进行了类型转换。=== (或 !==)操作不会执行任何转换。===在比较值和类型时，可以说比==更快。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[10] ==  10      // 为 true</div><div class="line">[10] === 10      // 为 false</div><div class="line"></div><div class="line">&apos;10&apos; ==  10      // 为 true</div><div class="line">&apos;10&apos; === 10      // 为 false</div><div class="line"></div><div class="line"> []  ==  0       // 为 true</div><div class="line"> []  === 0       // 为 false</div><div class="line"></div><div class="line"> &apos;&apos;  ==  false   // 为 true 但 true == &quot;a&quot; 为false</div><div class="line"> &apos;&apos;  === false   // 为 false</div></pre></td></tr></table></figure>
<h2 id="妙用“-amp-amp-”和“-”"><a href="#妙用“-amp-amp-”和“-”" class="headerlink" title="妙用“&amp;&amp;”和“||”"></a>妙用“&amp;&amp;”和“||”</h2><blockquote>
<p><code>||</code>和<code>&amp;&amp;</code>运算符妙用，可用于精简代码，降低程序的可读性。</p>
</blockquote>
<p><strong>用于赋值</strong><br><code>&amp;&amp;</code>：从左往右依次判断，当当前值为<code>true</code>则继续，为<code>false</code>则返回此值（是返回未转换为布尔值时的原值哦）<br><code>||</code> ： 从左往右依次判断，当当前值为<code>false</code>则继续，为<code>true</code>则返回此值（是返回未转换为布尔值时的原值哦）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var attr = true &amp;&amp; 4 &amp;&amp; &quot;aaa&quot;; //aaa;</div><div class="line"></div><div class="line">var attr = true &amp;&amp; 0 &amp;&amp; &quot;aaa&quot;; //0</div><div class="line"></div><div class="line">var attr = 100 || 12; //100</div><div class="line"></div><div class="line">var attr = &quot;e&quot; || &quot;hahaha&quot; //&apos;e&apos;</div><div class="line"></div><div class="line">var attr = &quot;&quot; || &quot;hahaha&quot; //&apos;hahaha&apos;</div></pre></td></tr></table></figure></p>
<p><strong>用于条件执行语句</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 普通的if语句</div><div class="line">if(test)&#123;</div><div class="line">  isTrue();</div><div class="line">&#125;</div><div class="line">// 上面的语句可以使用 &apos;&amp;&amp;&apos; 写为：</div><div class="line">( test &amp;&amp; isTrue() );</div><div class="line"></div><div class="line"></div><div class="line">test = false;</div><div class="line">if(!test)&#123;</div><div class="line">  isFalse();</div><div class="line">&#125;</div><div class="line">// 上面的语句可以使用 &apos;||&apos; 写为：</div><div class="line">( test || isFalse());</div></pre></td></tr></table></figure>
<p><strong>用于多次判断后的赋值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">var add_level = 0; </div><div class="line">if(add_step == 5)&#123; </div><div class="line">    add_level = 1; </div><div class="line">&#125; </div><div class="line">else if(add_step == 10)&#123; </div><div class="line">    add_level = 2; </div><div class="line">&#125; </div><div class="line">else if(add_step == 12)&#123; </div><div class="line">    add_level = 3; </div><div class="line">&#125; </div><div class="line">else if(add_step == 15)&#123; </div><div class="line">    add_level = 4; </div><div class="line">&#125; </div><div class="line">else &#123; </div><div class="line">    add_level = 0; </div><div class="line">&#125;</div><div class="line"></div><div class="line">//可以写成</div><div class="line">var add_level = (add_step==5 &amp;&amp; 1) || (add_step==10 &amp;&amp; 2) || (add_step==12 &amp;&amp; 3) || (add_step==15 &amp;&amp; 4) || 0;</div></pre></td></tr></table></figure>
<h2 id="获取数组中的最大值或最小值"><a href="#获取数组中的最大值或最小值" class="headerlink" title="获取数组中的最大值或最小值"></a>获取数组中的最大值或最小值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function maxAndMin(arr)&#123;</div><div class="line">    return &#123;</div><div class="line">       max:Math.max.apply(null,arr.join(&apos;,&apos;).split(&apos;,&apos;)),</div><div class="line">       min:Math.min.apply(null,arr.join(&apos;,&apos;).split(&apos;,&apos;))</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>该方法适合一维或者多维数组。</p>
</blockquote>
<h2 id="随机获取数组里的元素"><a href="#随机获取数组里的元素" class="headerlink" title="随机获取数组里的元素"></a>随机获取数组里的元素</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">function getRadomFromArr(arr)&#123;</div><div class="line">    return arr[Math.floor(Math.random()*arr.length)];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="从数组里查找指定的值"><a href="#从数组里查找指定的值" class="headerlink" title="从数组里查找指定的值"></a>从数组里查找指定的值</h2><blockquote>
<p>查到了返回<code>true</code>，没查到返回<code>false</code>。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function findInArr(arr, value)&#123;</div><div class="line">	for (var i=0; i&lt;arr.length; i++)&#123;</div><div class="line">		if (arr[i] == value)&#123;</div><div class="line">			return true;</div><div class="line">		&#125;</div><div class="line">	&#125;	</div><div class="line">	return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成指定长度的随机数字字母字符串"><a href="#生成指定长度的随机数字字母字符串" class="headerlink" title="生成指定长度的随机数字字母字符串"></a>生成指定长度的随机数字字母字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function getRandomStr(len) &#123;</div><div class="line">    var str = &quot;&quot;;</div><div class="line">    for( ; str.length &lt; len; str  += Math.random().toString(36).substr(2));</div><div class="line">    return  str.substr(0, len);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="去除字符串的空格"><a href="#去除字符串的空格" class="headerlink" title="去除字符串的空格"></a>去除字符串的空格</h2><blockquote>
<p>虽然在ECMAScript5中已经实现了trim方法，它对低版本浏览器并不支持，所以有时候我们需要自己实现。</p>
</blockquote>
<p><strong>去除首尾空格</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function trim(str)&#123;</div><div class="line">    return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">trim(&apos;  hello world    &apos;); //&quot;hello world&quot;</div></pre></td></tr></table></figure></p>
<p><strong>去除所有空格</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function trimAll(str)&#123;</div><div class="line">    return str.replace(/\s+/g,&quot;&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">trimAll(&apos;   he ll o  wo  r ld    &apos;); //&quot;helloworld&quot;</div></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>JavaScript里面肯定还有很多技巧，以后遇到了慢慢总结。JavaScript的水很深，感觉还有好多要学的。加油！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这两年前端很火，JavaScript又是前端的必会技能，在JavaScript开发中其实有一些有意思的小技巧和方法，本文记录了一些我工作中遇到的一些技巧和方法。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;生成指定范围内的随机数&quot;&gt;&lt;a href=&quot;#生成指定范围内的随机数&quot; class=&quot;headerlink&quot; title=&quot;生成指定范围内的随机数&quot;&gt;&lt;/a&gt;生成指定范围内的随机数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;当我们需要获取指定范围&lt;code&gt;(min,max)&lt;/code&gt;内的整数的时候，下面的代码非常适合；这段代码用的还挺多的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;function setRadomNum(min,max)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return  Math.floor(Math.random() * (max - min + 1)) + min;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="JavaScript" scheme="http://mrsunny123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web 存储 —— 关于Cookie, LocalStorage 与 SessionStorage</title>
    <link href="http://mrsunny123.github.io/2016/09/11/Web-Storage/"/>
    <id>http://mrsunny123.github.io/2016/09/11/Web-Storage/</id>
    <published>2016-09-11T07:21:20.000Z</published>
    <updated>2016-09-19T06:57:42.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做项目是会有各种需求，有时候希望通过一些手段来持久化的存储一些有用的数据。一般将这项任务交给了服务器端的数据库或者浏览器端的cookie。随着HTML5的出现，web开发又有了新选择：Web Storage。下面就来说说cookie与web Storage。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><code>Cookie</code>是小甜饼的意思。cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。</p>
<h2 id="Web-Storage"><a href="#Web-Storage" class="headerlink" title="Web Storage"></a>Web Storage</h2><p>html5中的Web Storage包括了两种存储方式：<code>sessionStorage</code>和<code>localStorage</code>。<br><a id="more"></a><br><code>SessionStorage</code>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此SessionStorage不是一种持久化的本地存储，仅仅是会话级别的存储。</p>
<p><code>LocalStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</p>
<h3 id="Web-Storage浏览器兼容性"><a href="#Web-Storage浏览器兼容性" class="headerlink" title="Web Storage浏览器兼容性"></a>Web Storage浏览器兼容性</h3><table>
<thead>
<tr>
<th style="text-align:center">特性/浏览器</th>
<th style="text-align:center">Chrome</th>
<th style="text-align:center">Firefox (Gecko)</th>
<th style="text-align:center">Internet Explorer</th>
<th style="text-align:center">Opera</th>
<th style="text-align:center">Safari (WebKit)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>localStorage</strong></td>
<td style="text-align:center">4</td>
<td style="text-align:center">3.5</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10.50</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center"><strong>sessionStorage</strong></td>
<td style="text-align:center">5</td>
<td style="text-align:center">2</td>
<td style="text-align:center">8</td>
<td style="text-align:center">10.50</td>
<td style="text-align:center">4</td>
</tr>
</tbody>
</table>
<h3 id="localStorage和sessionStorage操作"><a href="#localStorage和sessionStorage操作" class="headerlink" title="localStorage和sessionStorage操作"></a>localStorage和sessionStorage操作</h3><p>LocalStorage和SessionStorage都具有相同的操作方法，例如setItem、getItem、removeItem和clear等。</p>
<p><strong>setItem</strong><br>用途：将value存储到key字段<br>用法：.setItem( key, value)<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.setItem(&quot;key&quot;, &quot;value&quot;);</div><div class="line">localStorage.setItem(&quot;site&quot;, &quot;123&quot;);</div></pre></td></tr></table></figure></p>
<p><strong>getItem</strong><br>用途：获取指定key本地存储的值<br>用法：.getItem( key)<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.getItem(&quot;key&quot;);</div><div class="line">localStorage.getItem(&quot;site&quot;);</div></pre></td></tr></table></figure></p>
<p><strong>removeItem</strong><br>用途：删除指定key本地存储的值<br>用法：.removeItem( key)<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.removeItem(&quot;key&quot;);</div><div class="line">localStorage.removeItem(&quot;site&quot;);</div></pre></td></tr></table></figure></p>
<p><strong>clear</strong><br>用途：清除所有的key/value<br>用法：.clear()<br>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sessionStorage.clear();</div><div class="line">localStorage.clear();</div></pre></td></tr></table></figure></p>
<p><strong>点操作和[ ]</strong><br>web Storage不但可以用自身的setItem,getItem等方便存取，也可以像普通对象一样用点(.)操作符，及[]的方式进行数据存储，像如下的代码： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var storage = window.localStorage; </div><div class="line">storage.key1 = &quot;hello&quot;; </div><div class="line">storage[&quot;key2&quot;] = &quot;world&quot;; </div><div class="line">console.log(storage.key1); </div><div class="line">console.log(storage[&quot;key2&quot;]);</div></pre></td></tr></table></figure>
<p><strong>localStorage和sessionStorage的key和length属性实现遍历</strong><br>sessionStorage和localStorage提供的key()和length可以方便的实现存储的数据遍历，例如下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var storage = window.localStorage; </div><div class="line">for (var i=0, len = storage.length; i  &lt;  len; i++)&#123; </div><div class="line">    var key = storage.key(i);     </div><div class="line">    var value = storage.getItem(key);     </div><div class="line">    console.log(key + &quot;=&quot; + value); </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="三者的对比"><a href="#三者的对比" class="headerlink" title="三者的对比"></a>三者的对比</h2><table>
<thead>
<tr>
<th style="text-align:left">特性</th>
<th style="text-align:left">Cookie</th>
<th style="text-align:left">LocalStorage</th>
<th style="text-align:left">SessionStorage</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数据的有效期</td>
<td style="text-align:left">可设置失效时间，默认是关闭浏览器后失效</td>
<td style="text-align:left">除非被清除，否则永久保存</td>
<td style="text-align:left">仅在当前会话下有效，关闭页面或浏览器后被清除</td>
</tr>
<tr>
<td style="text-align:left">可存储数据大小</td>
<td style="text-align:left">4K左右</td>
<td style="text-align:left">5M左右</td>
<td style="text-align:left">5M左右</td>
</tr>
<tr>
<td style="text-align:left">是否需要与服务端通信</td>
<td style="text-align:left">每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</td>
<td style="text-align:left">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
<td style="text-align:left">仅在客户端（即浏览器）中保存，不参与和服务器的通信</td>
</tr>
</tbody>
</table>
<blockquote>
<p>除了上面以外，<code>LocalStorage</code>与<code>SessionStorage</code>拥有<code>setItem</code>,<code>getItem</code>,<code>removeItem</code>,<code>clear</code>等方法，操作起来比较方便，而<code>Cookie</code>需要前端开发者自己封装<code>setCookie</code>，<code>getCookie</code>。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><code>Cookie</code>比较常见的应用是判断用户是否登录。针对登录过的用户，服务器端会在他登录时往 <code>Cookie</code> 中插入一段加密过的唯一辨识单一用户的辨识码，下次只要读取这个值就可以判断当前用户是否登录啦。<br><code>LocalStorage</code>可以用来保存用户在电商网站的购物车信息，也可以保存一些HTML5游戏的本地数据。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>使用<code>Cookie</code>、<code>localStorage</code> 和 <code>sessionStorage</code>的时候，需要时刻注意是否有代码存在 XSS 注入的风险。如果你的网站中有 XSS 的风险，它们就能对你的 <code>localStorage</code> 随意更改。所以千万不要用它们存储你系统中的敏感数据。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.cnblogs.com/yuzhongwusan/archive/2011/12/19/2293347.html" target="_blank" rel="external">HTMl5的sessionStorage和localStorage</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="external">使用 Web Storage API</a><br><a href="https://segmentfault.com/a/1190000002723469" target="_blank" rel="external">详说 Cookie, LocalStorage 与 SessionStorage</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;做项目是会有各种需求，有时候希望通过一些手段来持久化的存储一些有用的数据。一般将这项任务交给了服务器端的数据库或者浏览器端的cookie。随着HTML5的出现，web开发又有了新选择：Web Storage。下面就来说说cookie与web Storage。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;h2 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Cookie&lt;/code&gt;是小甜饼的意思。cookie 确实非常小，它的大小限制为4KB左右。它的主要用途有保存登录信息，比如你登录某个网站市场可以看到“记住密码”，这通常就是通过在 Cookie 中存入一段辨别用户身份的数据来实现的。&lt;/p&gt;
&lt;h2 id=&quot;Web-Storage&quot;&gt;&lt;a href=&quot;#Web-Storage&quot; class=&quot;headerlink&quot; title=&quot;Web Storage&quot;&gt;&lt;/a&gt;Web Storage&lt;/h2&gt;&lt;p&gt;html5中的Web Storage包括了两种存储方式：&lt;code&gt;sessionStorage&lt;/code&gt;和&lt;code&gt;localStorage&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="学习" scheme="http://mrsunny123.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://mrsunny123.github.io/tags/JavaScript/"/>
    
      <category term="HTML5" scheme="http://mrsunny123.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象克隆</title>
    <link href="http://mrsunny123.github.io/2016/08/24/JS-Clone/"/>
    <id>http://mrsunny123.github.io/2016/08/24/JS-Clone/</id>
    <published>2016-08-24T02:41:20.000Z</published>
    <updated>2016-08-24T06:20:43.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前有人问我如何克隆一个JS对象，我当时没答上来；过后我查资料弄懂了这个问题，现在整理成文。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>JavaScript的一切实例都是对象，但他们也分为原始类型和引用类型。原始类型对象指的是字符串（<code>String</code>）、数值（<code>Number</code>）、布尔值（<code>Boolean</code>）、<code>undefined</code>、<code>null</code>，引用类型对象指的是数组（<code>Array</code>）、对象（<code>Object</code>）、函数（<code>Function</code>）。<br>既然对象分为这两类，他们的复制克隆也是有差别的。普通对象存储的是对象的实际数据，而引用对象存储的是对象的引用地址，而把对象的实际内容单独存放。下面我们就来看看他们克隆的区别。<br><a id="more"></a></p>
<h2 id="原始类型对象的克隆"><a href="#原始类型对象的克隆" class="headerlink" title="原始类型对象的克隆"></a>原始类型对象的克隆</h2><h3 id="字符串的克隆"><a href="#字符串的克隆" class="headerlink" title="字符串的克隆"></a>字符串的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=&quot;abc&quot;;</div><div class="line">var y=x;</div><div class="line">y=&quot;xyz&quot;;</div><div class="line"> </div><div class="line">alert(x);   // &quot;abc&quot;</div><div class="line">alert(y);   // &quot;xyz&quot;</div></pre></td></tr></table></figure>
<h3 id="数值的克隆"><a href="#数值的克隆" class="headerlink" title="数值的克隆"></a>数值的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=1;</div><div class="line">var y=x;</div><div class="line">y=2;</div><div class="line"></div><div class="line">alert(x);   // 1</div><div class="line">alert(y);   // 2</div></pre></td></tr></table></figure>
<h3 id="布尔值的克隆"><a href="#布尔值的克隆" class="headerlink" title="布尔值的克隆"></a>布尔值的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=true;</div><div class="line">var y=x;</div><div class="line">y=false;</div><div class="line"> </div><div class="line">alert(x);   // true</div><div class="line">alert(y);   // false</div></pre></td></tr></table></figure>
<p>我们可以看出来原始类型的克隆很简单，只需要一个<code>=</code>赋值就可以了；<code>undefined</code>、<code>null</code>也是同理。</p>
<h2 id="引用类型的对象克隆"><a href="#引用类型的对象克隆" class="headerlink" title="引用类型的对象克隆"></a>引用类型的对象克隆</h2><h3 id="数值的克隆-1"><a href="#数值的克隆-1" class="headerlink" title="数值的克隆"></a>数值的克隆</h3><p>如果采用普通克隆：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=[1,2];</div><div class="line">var y=x;</div><div class="line">y.push(3);</div><div class="line"></div><div class="line">alert(x);   // 1,2,3</div><div class="line">alert(y);   // 1,2,3</div></pre></td></tr></table></figure></p>
<p>由上可知，原始数组x，克隆数组y，修改了克隆数组y，但也同时修改了原始数组x，这就是引用对象的特点。那么怎样才能达到完整的数组克隆呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var x=[1,2];</div><div class="line">var y=[];</div><div class="line">var i=0;</div><div class="line">var j=x.length;</div><div class="line">for(;i&lt;j;i++)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y.push(3);</div><div class="line"> </div><div class="line">console.log(x);   // [1,2]</div><div class="line">console.log(y);   // [1,2,3]</div></pre></td></tr></table></figure></p>
<p>这样，两个数值就互不干扰，实现了完整数组克隆。</p>
<h3 id="对象的克隆"><a href="#对象的克隆" class="headerlink" title="对象的克隆"></a>对象的克隆</h3><p>和数组的克隆同理，对象的完整克隆如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var x=&#123;a:2,b:4&#125;;</div><div class="line">var y=&#123;&#125;;</div><div class="line">var i;</div><div class="line">for(i in x)</div><div class="line">&#123;</div><div class="line">	y[i]=x[i];</div><div class="line">&#125;</div><div class="line">y.c=6;</div><div class="line"> </div><div class="line">console.log(x);   // Object &#123;a: 2, b: 4&#125; </div><div class="line">console.log(y);   // Object &#123;a: 2, b: 4, c: 6&#125;</div></pre></td></tr></table></figure></p>
<h3 id="函数的克隆"><a href="#函数的克隆" class="headerlink" title="函数的克隆"></a>函数的克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var x=function()&#123;alert(1);&#125;;</div><div class="line">var y=x;</div><div class="line">y=function()&#123;alert(2);&#125;;</div><div class="line"></div><div class="line">console.log(x);   // function()&#123;alert(1);&#125;;</div><div class="line">console.log(y);   // function()&#123;alert(2);&#125;;</div></pre></td></tr></table></figure>
<p>函数的克隆与原始类型对象克隆的方式类似；只需要使用<code>=</code>就可以了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>根据上面的情况，另外，克隆引用对象必须采用完整克隆（深度克隆），包括对象的值也是一个对象也要进行完整克隆（深度克隆）。所以，我们可以总结并封装一个通用的克隆方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function clone(obj)&#123;</div><div class="line">    var o,i,j,k;</div><div class="line">    if(typeof(obj)!==&quot;object&quot; || obj===null)return obj;</div><div class="line">    if(obj instanceof Array)&#123;</div><div class="line">        o=[];</div><div class="line">        i=0;j=obj.length;</div><div class="line">        for(;i&lt;j;i++)&#123;</div><div class="line">            if(typeof(obj[i])===&quot;object&quot; &amp;&amp; obj[i]!=null)&#123;</div><div class="line">                o[i]=clone(obj[i]);</div><div class="line">            &#125;else&#123;</div><div class="line">                o[i]=obj[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;else&#123;</div><div class="line">        o=&#123;&#125;;</div><div class="line">        for(i in obj)&#123;</div><div class="line">            if(typeof(obj[i])===&quot;object&quot; &amp;&amp; obj[i]!==null)&#123;</div><div class="line">                o[i]=clone(obj[i]);</div><div class="line">            &#125;else&#123;</div><div class="line">                o[i]=obj[i];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return o;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前有人问我如何克隆一个JS对象，我当时没答上来；过后我查资料弄懂了这个问题，现在整理成文。&lt;/p&gt;
&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;JavaScript的一切实例都是对象，但他们也分为原始类型和引用类型。原始类型对象指的是字符串（&lt;code&gt;String&lt;/code&gt;）、数值（&lt;code&gt;Number&lt;/code&gt;）、布尔值（&lt;code&gt;Boolean&lt;/code&gt;）、&lt;code&gt;undefined&lt;/code&gt;、&lt;code&gt;null&lt;/code&gt;，引用类型对象指的是数组（&lt;code&gt;Array&lt;/code&gt;）、对象（&lt;code&gt;Object&lt;/code&gt;）、函数（&lt;code&gt;Function&lt;/code&gt;）。&lt;br&gt;既然对象分为这两类，他们的复制克隆也是有差别的。普通对象存储的是对象的实际数据，而引用对象存储的是对象的引用地址，而把对象的实际内容单独存放。下面我们就来看看他们克隆的区别。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaScript" scheme="http://mrsunny123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客</title>
    <link href="http://mrsunny123.github.io/2016/08/23/Hello-Hexo/"/>
    <id>http://mrsunny123.github.io/2016/08/23/Hello-Hexo/</id>
    <published>2016-08-23T03:10:53.000Z</published>
    <updated>2016-08-23T09:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<p>做前端也有一段时间了，身为一个有(ai)追(zhuang)求(X)前端，怎么能没有自己的个人博客呢^_^<br>有想法就去做，所以最近用Hexo在github上搭建一个自己的开源博客，终于有了自己的博客了，也希望自己以后能坚持写文！！！<br>搭建过程中也遇到一些问题，接下来，我将遇到的问题记录下来作为第一篇博客，希望能帮到有需要的人。<br><a id="more"></a></p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ul>
<li>安装Node.js<br>到<a href="https://nodejs.org/en/" target="_blank" rel="external">Node.js</a>官网下载相应系统的最新版本，一路安装即可。</li>
<li>安装git<br>根据不同系统安装相应的 <a href="https://git-scm.com/" target="_blank" rel="external">git</a> 环境。Mac、Linux系统不多说，Windows一般安装<a href="https://git-for-windows.github.io/" target="_blank" rel="external">msysgit</a>。</li>
<li>安装Hexo<br>使用<code>npm install hexo-cli -g</code>命令安装 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 到全局，然后输入命令<code>hexo -v</code>，输出hexo的版本号即为安装成功。</li>
<li><p>github准备</p>
<ul>
<li>博客是在 <a href="https://github.com/" target="_blank" rel="external">github</a> 上托管维护的，所以当然需要一个github账号。然后在账号下创建一个名为<code>your-name.github.io</code>的仓库。(<code>your-name</code>为你的账号名，比如我的账号名为<code>mrsunny123</code>，那仓库名为<code>mrsunny123.github.io</code>；下文同理)</li>
<li><p>接下来打开Git Bash，输入配置信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;You Name&quot;</div><div class="line">git config --global user.email yourmail@server.com</div><div class="line">ssh-keygen -C &apos;yourmail@server.com&apos; -t rsa      //生成ssh秘钥</div></pre></td></tr></table></figure>
</li>
<li><p>接着在C:User你的windows用户名.ssh 下找到 id_rsa.pub 文件；</p>
</li>
<li>打开github个人首页，点击<code>settings -&gt; SSH and GPG keys -&gt; New SSH key</code>；title 可以随便取名字，Key 里面添加的内容为 id_rsa.pub 文件内所有的代码。然后点击<code>Add SSH key</code>即可。</li>
<li>使用<code>SSH -v git@github.com</code>命令检测 Git 与 GitHub 是否连接成功。</li>
</ul>
</li>
</ul>
<h1 id="本地部署Hexo"><a href="#本地部署Hexo" class="headerlink" title="本地部署Hexo"></a>本地部署Hexo</h1><ul>
<li>在某个地方新建一个项目文件夹（比如Blog），然后进入Blog目录，输入<code>hexo init</code>命令进行初始化；</li>
<li>初始化完成后，然后输入<code>hexo generate(g)</code>命令将文章编译为静态页面；</li>
<li>把文章变成页面后，输入<code>hexo server(s)</code>命令启动本地服务，在浏览器中输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>查看生成的页面效果。</li>
</ul>
<h1 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h1><p>Hexo自己默认的主题是<code>landscape</code>，如果你满足与它，可以跳过这个步骤，直接进行下一步。我觉得默认主题不好看，所以换成了<code>yilia</code>主题，这个主题在移动端的显示也很不错。</p>
<ul>
<li><p>clone 主题代码<br>在目录下执行下面命令clone主题代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>Blog/_config.yml</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yilia    //默认为landscape</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>themes/yilia/_config.yml</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"># Header</div><div class="line">menu:</div><div class="line">  主页: /</div><div class="line">  所有文章: /archives</div><div class="line">  #随笔: /categories</div><div class="line"></div><div class="line"># SubNav</div><div class="line">subnav:</div><div class="line">  github: &quot;https://github.com/MrSunny123&quot;</div><div class="line">  weibo: &quot;http://weibo.com/u/5896702219&quot;</div><div class="line">  mail: &quot;mailto:zhangxy_92@outlook.com&quot;</div><div class="line">  rss: &quot;/atom.xml&quot;</div><div class="line">  #douban: &quot;#&quot;</div><div class="line">  #zhihu: &quot;#&quot;</div><div class="line">  #facebook: &quot;#&quot;</div><div class="line">  #google: &quot;#&quot;</div><div class="line">  #twitter: &quot;#&quot;</div><div class="line">  #linkedin: &quot;#&quot;</div><div class="line"></div><div class="line">rss: /atom.xml</div><div class="line"></div><div class="line"># 是否需要修改 root 路径</div><div class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</div><div class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</div><div class="line">root: </div><div class="line"></div><div class="line"># Content</div><div class="line">excerpt_link: 阅读全文</div><div class="line">fancybox: true</div><div class="line">mathjax: true</div><div class="line"></div><div class="line"># 是否开启动画效果</div><div class="line">animate: true</div><div class="line"></div><div class="line"># 是否在新窗口打开链接</div><div class="line">open_in_new: false</div><div class="line"></div><div class="line"># Miscellaneous</div><div class="line">google_analytics: &apos;&apos;</div><div class="line">favicon: /favicon.png</div><div class="line"></div><div class="line">#你的头像url</div><div class="line">avatar: /img/head.jpg</div><div class="line">#是否开启分享</div><div class="line">share_jia: true</div><div class="line">share_addthis: true</div><div class="line">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</div><div class="line">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</div><div class="line">duoshuo: &quot;sunny-blog&quot;</div><div class="line">#是否开启云标签</div><div class="line">tagcloud: true</div><div class="line"></div><div class="line">#是否开启友情链接</div><div class="line">#不开启——</div><div class="line">friends: false</div><div class="line">#开启——</div><div class="line">#friends:</div><div class="line">  #奥巴马的博客: http://localhost:4000/</div><div class="line"></div><div class="line">#是否开启“关于我”。</div><div class="line">#不开启——</div><div class="line">#aboutme: false</div><div class="line">#开启——</div><div class="line">aboutme: 程序猿一枚，目前专注WEB前端开发......</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>温馨提示：修改的时候，每个冒号后面都需要留一个英文空格，不然会出现报错！</code></p>
<ul>
<li>查看效果<br>更改主题之后使用命令<code>hexo server(s)</code>打开本地服务，查看效果。</li>
</ul>
<h1 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h1><p>上面所有的操作完成之后，你就可以将你的Blog项目部署到github上了。</p>
<ul>
<li><p>部署之前先修改<code>Blog/_config.yml</code>文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repository: https://github.com/MrSunny123/MrSunny123.github.io.git  //MrSunny123替换为你自己的用户名(下文同理)</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>然后使用如下命令部署：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>部署成功后，你在浏览器中输入<code>mrsunny123.github.io</code>，就能看到和本地一样的效果了。</p>
<h1 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h1><p>博客搭建完成后，就是写文和维护了，更新和维护其实很简单，每次只要依次执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ hexo new(n) xxx    //创建新文章</div><div class="line">$ hexo clean     //清除缓存</div><div class="line">$ hexo generate(g)    //文章写完后执行，把文章生成页面</div><div class="line">$ hexo server(s)    //启动本地服务调试</div><div class="line">$ hexo deploy(d)    //部署到github</div></pre></td></tr></table></figure></p>
<p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>支持<code>Markdown</code>写文章，所以只有关心内容，不用担心排版，用起来还是很不错的^_^</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>博客还不是很完善，后期还会做一些修改，其实已经添加了一些东西了，比如：添加总站访问量和文章阅读量。<br>如果大家有什么问题，欢迎留言，我会把我知道的告诉大家。<br>好了，到这里利用Hexo搭建github博客的步骤就结束了。想想还有点小激动呢……</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;做前端也有一段时间了，身为一个有(ai)追(zhuang)求(X)前端，怎么能没有自己的个人博客呢^_^&lt;br&gt;有想法就去做，所以最近用Hexo在github上搭建一个自己的开源博客，终于有了自己的博客了，也希望自己以后能坚持写文！！！&lt;br&gt;搭建过程中也遇到一些问题，接下来，我将遇到的问题记录下来作为第一篇博客，希望能帮到有需要的人。&lt;br&gt;
    
    </summary>
    
      <category term="工作" scheme="http://mrsunny123.github.io/categories/work/"/>
    
    
      <category term="Hexo" scheme="http://mrsunny123.github.io/tags/Hexo/"/>
    
      <category term="教程" scheme="http://mrsunny123.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
